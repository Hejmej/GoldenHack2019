{"version":3,"sources":["components/WhiteLogoSmall.png","components/header.js","components/home.js","components/analytics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","require","alt","to","Home","Analytics","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,4C,8GCmB5BC,EAhBA,WACX,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACf,yBAAKC,IAAKC,EAAQ,IAAyBC,IAAI,QAAQH,UAAU,SAC7D,wBAAIA,UAAU,SACV,4BAAI,kBAAC,IAAD,CAASI,GAAG,aAAZ,aACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,cACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAZ,WACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAWJ,UAAU,yBAAjC,WCHPK,MAPjB,WACI,OACI,+B,MCKSC,I,OCYFC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,OACb,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,YAAYC,UAAWL,IACzC,kBAAC,EAAD,SCHYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c3a9bd7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WhiteLogoSmall.81bbd06b.png\";","import React from \"react\";\nimport {NavLink} from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n            <img src={require(\"./WhiteLogoSmall.png\")} alt=\"Novus\" className=\"left\"></img>\n                <ul className=\"right\">\n                    <li><NavLink to=\"/discover\">Discover</NavLink></li>\n                    <li><NavLink to=\"/analytics\">Analytics</NavLink></li>\n                    <li><NavLink to=\"/search\">Search</NavLink></li>\n                    <li><NavLink to='/account' className='btn btn-floating blue'>AH</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Home() {\n    return (\n        <div>\n        </div>\n    );\n  }\n  \n  export default Home;","import React from 'react';\n\nfunction Analytics() {\n    return (\n        <div>\n        </div>\n    );\n  }\n  \n  export default Analytics;","import React from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Home from './components/home';\nimport Discover from './components/discover';\nimport Analytics from './components/analytics';\nimport Search from './components/search';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/discover\" component={Home}/>\n        <Header/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}